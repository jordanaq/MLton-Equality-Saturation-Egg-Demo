mltonssa {datatypes = (datatype {tycon = "list_4", cons = (( dummy_0 ))},
                       datatype {tycon = "list_3",
                                 cons = (( nil_0 ), ( ::_2, ((< list_3 >)) ))},
                       datatype {tycon = "list_2",
                                 cons = (( nil_2 ),
                                         ( ::_1, ((< list_2 >),
                                                  (< (word8) vector >)) ))},
                       datatype {tycon = "list_1", cons = (( nil_3 ))},
                       datatype {tycon = "list_0",
                                 cons = (( ::_0, ((< list_0 >),
                                                  (< (word8, word8) tuple >)) ),
                                         ( nil_1 ))},
                       datatype {tycon = "bool", cons = (( true ), ( false ))}),
          globals = (statement {var = Some global_0,
                                type = (< (word8) vector >),
                                exp = exp::const::WordVector {const = "unhandled exception: "}},
                     statement {var = Some global_1,
                                type = (< (word8) vector >),
                                exp = exp::const::WordVector {const = "Overflow"}},
                     statement {var = Some global_2,
                                type = (< (word8) vector >),
                                exp = exp::const::WordVector {const = "\n"}},
                     statement {var = Some global_3,
                                type = (< (word8) vector >),
                                exp = exp::const::WordVector {const = "unhandled exception in Basis Library"}},
                     statement {var = Some global_4,
                                type = (< word32 >),
                                exp = exp::const::Word {const = 0x0:w32}},
                     statement {var = Some global_5,
                                type = (< word32 >),
                                exp = exp::const::Word {const = 0x1:w32}},
                     statement {var = Some global_6,
                                type = (< word64 >),
                                exp = exp::const::Word {const = 0x0:w64}},
                     statement {var = Some global_7,
                                type = (< list_3 >),
                                exp = exp::ConApp {con = nil_0, args = ()}},
                     statement {var = Some global_40,
                                type = (< list_3 >),
                                exp = exp::Var {var = global_7}},
                     statement {var = Some global_8,
                                type = (< word64 >),
                                exp = exp::const::Word {const = 0x1:w64}},
                     statement {var = Some global_9,
                                type = (< word64 >),
                                exp = exp::const::Word {const = 0x4000000000000000:w64}},
                     statement {var = Some global_10,
                                type = (< word64 >),
                                exp = exp::const::Word {const = 0x7FFFFFFF:w64}},
                     statement {var = Some global_11,
                                type = (< word64 >),
                                exp = exp::const::Word {const = 0x5:w64}},
                     statement {var = Some global_12,
                                type = (< word8 >),
                                exp = exp::const::Word {const = 0x0:w8}},
                     statement {var = Some global_13,
                                type = (< word64 >),
                                exp = exp::const::Word {const = 0x100:w64}},
                     statement {var = Some global_14,
                                type = (< word8 >),
                                exp = exp::const::Word {const = 0x30:w8}},
                     statement {var = Some global_15,
                                type = (< word8 >),
                                exp = exp::const::Word {const = 0x39:w8}},
                     statement {var = Some global_47,
                                type = (< (word8, word8) tuple >),
                                exp = exp::Tuple {args = (global_15, global_14)}},
                     statement {var = Some global_16,
                                type = (< word32 >),
                                exp = exp::const::Word {const = 0xA:w32}},
                     statement {var = Some global_17,
                                type = (< word8 >),
                                exp = exp::const::Word {const = 0x66:w8}},
                     statement {var = Some global_18,
                                type = (< word8 >),
                                exp = exp::const::Word {const = 0x61:w8}},
                     statement {var = Some global_46,
                                type = (< (word8, word8) tuple >),
                                exp = exp::Tuple {args = (global_17, global_18)}},
                     statement {var = Some global_24,
                                type = (< (word8, word8) tuple >),
                                exp = exp::Var {var = global_46}},
                     statement {var = Some global_19,
                                type = (< word8 >),
                                exp = exp::const::Word {const = 0x46:w8}},
                     statement {var = Some global_20,
                                type = (< word8 >),
                                exp = exp::const::Word {const = 0x41:w8}},
                     statement {var = Some global_45,
                                type = (< (word8, word8) tuple >),
                                exp = exp::Tuple {args = (global_19, global_20)}},
                     statement {var = Some global_22,
                                type = (< (word8, word8) tuple >),
                                exp = exp::Var {var = global_45}},
                     statement {var = Some global_21,
                                type = (< list_0 >),
                                exp = exp::ConApp {con = nil_1, args = ()}},
                     statement {var = Some global_23,
                                type = (< list_0 >),
                                exp = exp::ConApp {con = ::_0,
                                                   args = (global_21, global_22)}},
                     statement {var = Some global_25,
                                type = (< list_0 >),
                                exp = exp::ConApp {con = ::_0,
                                                   args = (global_23, global_24)}},
                     statement {var = Some global_26,
                                type = (< word32 >),
                                exp = exp::const::Word {const = 0x20:w32}},
                     statement {var = Some global_27,
                                type = (< word32 >),
                                exp = exp::const::Word {const = 0x100:w32}},
                     statement {var = Some global_28,
                                type = (< (word8) vector >),
                                exp = exp::const::WordVector {const = "MLton.Exit.halt"}},
                     statement {var = Some global_29,
                                type = (< word64 >),
                                exp = exp::const::Word {const = 0x10:w64}},
                     statement {var = Some global_30,
                                type = (< (word8) vector >),
                                exp = exp::const::WordVector {const = "0123456789ABCDEF"}},
                     statement {var = Some global_31,
                                type = (< word8 >),
                                exp = exp::const::Word {const = 0x7E:w8}},
                     statement {var = Some global_32,
                                type = (< (word8) vector >),
                                exp = exp::const::WordVector {const = "): "}},
                     statement {var = Some global_33,
                                type = (< (word8) vector >),
                                exp = exp::const::WordVector {const = "exit must have 0 <= status < 256"}},
                     statement {var = Some global_34,
                                type = (< list_2 >),
                                exp = exp::ConApp {con = nil_2, args = ()}},
                     statement {var = Some global_35,
                                type = (< list_2 >),
                                exp = exp::ConApp {con = ::_1,
                                                   args = (global_34, global_33)}},
                     statement {var = Some global_36,
                                type = (< (word8) vector >),
                                exp = exp::const::WordVector {const = "MLton.Exit.exit("}},
                     statement {var = Some global_37,
                                type = (< (word8) vector >),
                                exp = exp::const::WordVector {const = "Top-level suffix raised exception.\n"}},
                     statement {var = Some global_38,
                                type = (< list_1 >),
                                exp = exp::ConApp {con = nil_3, args = ()}},
                     statement {var = Some global_39,
                                type = (< bool >),
                                exp = exp::ConApp {con = false, args = ()}},
                     statement {var = Some global_41,
                                type = (< list_3 >),
                                exp = exp::ConApp {con = ::_2,
                                                   args = (global_40)}},
                     statement {var = Some global_42,
                                type = (< bool >),
                                exp = exp::ConApp {con = true, args = ()}},
                     statement {var = Some global_43,
                                type = (< list_2 >),
                                exp = exp::ConApp {con = ::_1,
                                                   args = (global_35, global_32)}},
                     statement {var = Some global_44,
                                type = (< list_4 >),
                                exp = exp::ConApp {con = dummy_0, args = ()}},
                     statement {var = Some zeroArr_0,
                                type = (< (word8) array >),
                                exp = exp::PrimApp {prim = primitive {prim = "Array_array",
                                                                      kind = DependsOnState},
                                                    args = (),
                                                    targs = ((< word8 >))}}),
          functions = (function {name = "main_0",
                                 mayInline = false,
                                 args = (),
                                 start = L_52,
                                 returns = None,
                                 raises = None,
                                 blocks = (block {label = L_52,
                                                  args = (),
                                                  statements = (),
                                                  transfer = transfer::Goto {dst = loop_5,
                                                                             args = (global_41,
                                                                                     global_8,
                                                                                     global_9)}},
                                           block {label = loop_5,
                                                  args = (x_78: (< list_3 >),
                                                          x_81: (< word64 >),
                                                          x_120: (< word64 >)),
                                                  statements = (statement {var = Some x_121,
                                                                           type = (< bool >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Word64_equal",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_120,
                                                                                                       global_6)}}),
                                                  transfer = transfer::case::Con {test = x_121,
                                                                                  cases =   (true => L_80,
                                                                                             false => L_55)}},
                                           block {label = L_80,
                                                  args = (),
                                                  statements = (),
                                                  transfer = transfer::case::Con {test = x_78,
                                                                                  cases =   (nil_0 => L_56,
                                                                                             ::_2 => loop_6)}},
                                           block {label = L_56,
                                                  args = (),
                                                  statements = (statement {var = Some messagers_0,
                                                                           type = (< (list_4) ref >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Ref_ref",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (global_44),
                                                                                               targs = ((< list_4 >))}}),
                                                  transfer = transfer::Goto {dst = loop_14,
                                                                             args = (global_6)}},
                                           block {label = loop_14,
                                                  args = (x_118: (< word64 >)),
                                                  statements = (statement {var = Some x_119,
                                                                           type = (< bool >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "WordS64_lt",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_118,
                                                                                                       global_13)}}),
                                                  transfer = transfer::case::Con {test = x_119,
                                                                                  cases =   (true => L_79,
                                                                                             false => L_78)}},
                                           block {label = L_79,
                                                  args = (),
                                                  statements = (statement {var = Some x_117,
                                                                           type = (< word64 >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Word64_add",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_118,
                                                                                                       global_8)}}),
                                                  transfer = transfer::Goto {dst = loop_14,
                                                                             args = (x_117)}},
                                           block {label = L_78,
                                                  args = (),
                                                  statements = (),
                                                  transfer = transfer::Goto {dst = loop_13,
                                                                             args = (global_6)}},
                                           block {label = loop_13,
                                                  args = (x_115: (< word64 >)),
                                                  statements = (statement {var = Some x_116,
                                                                           type = (< bool >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "WordS64_lt",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_115,
                                                                                                       global_13)}}),
                                                  transfer = transfer::case::Con {test = x_116,
                                                                                  cases =   (true => L_77,
                                                                                             false => L_76)}},
                                           block {label = L_77,
                                                  args = (),
                                                  statements = (statement {var = Some x_114,
                                                                           type = (< word64 >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Word64_add",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_115,
                                                                                                       global_8)}}),
                                                  transfer = transfer::Goto {dst = loop_13,
                                                                             args = (x_114)}},
                                           block {label = L_76,
                                                  args = (),
                                                  statements = (),
                                                  transfer = transfer::Goto {dst = loop_12,
                                                                             args = (global_6)}},
                                           block {label = loop_12,
                                                  args = (x_112: (< word64 >)),
                                                  statements = (statement {var = Some x_113,
                                                                           type = (< bool >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "WordS64_lt",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_112,
                                                                                                       global_13)}}),
                                                  transfer = transfer::case::Con {test = x_113,
                                                                                  cases =   (true => L_75,
                                                                                             false => L_74)}},
                                           block {label = L_75,
                                                  args = (),
                                                  statements = (statement {var = Some x_111,
                                                                           type = (< word64 >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Word64_add",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_112,
                                                                                                       global_8)}}),
                                                  transfer = transfer::Goto {dst = loop_12,
                                                                             args = (x_111)}},
                                           block {label = L_74,
                                                  args = (),
                                                  statements = (),
                                                  transfer = transfer::Goto {dst = loop_11,
                                                                             args = (global_6)}},
                                           block {label = loop_11,
                                                  args = (x_107: (< word64 >)),
                                                  statements = (statement {var = Some x_110,
                                                                           type = (< bool >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "WordS64_lt",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_107,
                                                                                                       global_13)}}),
                                                  transfer = transfer::case::Con {test = x_110,
                                                                                  cases =   (true => L_73,
                                                                                             false => L_67)}},
                                           block {label = L_73,
                                                  args = (),
                                                  statements = (statement {var = Some x_105,
                                                                           type = (< word8 >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "WordS64_extdToWord8",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_107)}}),
                                                  transfer = transfer::Goto {dst = L_69,
                                                                             args = (global_25,
                                                                                     global_47)}},
                                           block {label = L_69,
                                                  args = (x_103: (< list_0 >),
                                                          x_108:
                                                            (< (word8, word8) tuple >)),
                                                  statements = (statement {var = Some cmax_0,
                                                                           type = (< word8 >),
                                                                           exp = exp::Select {tuple = x_108,
                                                                                              offset = 0}},
                                                                statement {var = Some cmin_0,
                                                                           type = (< word8 >),
                                                                           exp = exp::Select {tuple = x_108,
                                                                                              offset = 1}},
                                                                statement {var = Some x_109,
                                                                           type = (< bool >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "WordU8_lt",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_105,
                                                                                                       cmin_0)}}),
                                                  transfer = transfer::case::Con {test = x_109,
                                                                                  cases =   (true => L_72,
                                                                                             false => L_71)}},
                                           block {label = L_72,
                                                  args = (),
                                                  statements = (),
                                                  transfer = transfer::case::Con {test = x_103,
                                                                                  cases =   (nil_1 => L_70,
                                                                                             ::_0 => L_69)}},
                                           block {label = L_70,
                                                  args = (),
                                                  statements = (statement {var = Some x_106,
                                                                           type = (< word64 >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Word64_add",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_107,
                                                                                                       global_8)}}),
                                                  transfer = transfer::Goto {dst = loop_11,
                                                                             args = (x_106)}},
                                           block {label = L_71,
                                                  args = (),
                                                  statements = (statement {var = Some x_104,
                                                                           type = (< bool >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "WordU8_lt",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (cmax_0,
                                                                                                       x_105)}}),
                                                  transfer = transfer::case::Con {test = x_104,
                                                                                  cases =   (true => L_68,
                                                                                             false => L_70)}},
                                           block {label = L_68,
                                                  args = (),
                                                  statements = (),
                                                  transfer = transfer::case::Con {test = x_103,
                                                                                  cases =   (nil_1 => L_70,
                                                                                             ::_0 => L_69)}},
                                           block {label = L_67,
                                                  args = (),
                                                  statements = (),
                                                  transfer = transfer::Goto {dst = loop_10,
                                                                             args = (global_6)}},
                                           block {label = loop_10,
                                                  args = (x_101: (< word64 >)),
                                                  statements = (statement {var = Some x_102,
                                                                           type = (< bool >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "WordS64_lt",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_101,
                                                                                                       global_13)}}),
                                                  transfer = transfer::case::Con {test = x_102,
                                                                                  cases =   (true => L_66,
                                                                                             false => L_65)}},
                                           block {label = L_66,
                                                  args = (),
                                                  statements = (statement {var = Some x_100,
                                                                           type = (< word64 >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Word64_add",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_101,
                                                                                                       global_8)}}),
                                                  transfer = transfer::Goto {dst = loop_10,
                                                                             args = (x_100)}},
                                           block {label = L_65,
                                                  args = (),
                                                  statements = (statement {var = Some x_99,
                                                                           type = (< word64 >),
                                                                           exp = exp::const::Word {const = 0x21:w64}},
                                                                statement {var = Some x_87,
                                                                           type = (< (word8) array >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Array_alloc",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_99),
                                                                                               targs = ((< word8 >))}}),
                                                  transfer = transfer::Goto {dst = loop_9,
                                                                             args = (global_6)}},
                                           block {label = loop_9,
                                                  args = (x_97: (< word64 >)),
                                                  statements = (statement {var = Some x_98,
                                                                           type = (< bool >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "WordS64_lt",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_97,
                                                                                                       x_99)}}),
                                                  transfer = transfer::case::Con {test = x_98,
                                                                                  cases =   (true => L_64,
                                                                                             false => L_63)}},
                                           block {label = L_64,
                                                  args = (),
                                                  statements = (statement {var = None,
                                                                           type = (< unit >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Array_update",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_87,
                                                                                                       x_97,
                                                                                                       global_12),
                                                                                               targs = ((< word8 >))}},
                                                                statement {var = Some x_96,
                                                                           type = (< word64 >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Word64_add",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_97,
                                                                                                       global_8)}}),
                                                  transfer = transfer::Goto {dst = loop_9,
                                                                             args = (x_96)}},
                                           block {label = L_63,
                                                  args = (),
                                                  statements = (statement {var = Some x_86,
                                                                           type = (< (bool) ref >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Ref_ref",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (global_39),
                                                                                               targs = ((< bool >))}},
                                                                statement {var = Some x_95,
                                                                           type = (< word64 >),
                                                                           exp = exp::const::Word {const = 0x41:w64}},
                                                                statement {var = Some x_93,
                                                                           type = (< (word8) array >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Array_alloc",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_95),
                                                                                               targs = ((< word8 >))}}),
                                                  transfer = transfer::Goto {dst = loop_8,
                                                                             args = (global_6)}},
                                           block {label = loop_8,
                                                  args = (x_92: (< word64 >)),
                                                  statements = (statement {var = Some x_94,
                                                                           type = (< bool >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "WordS64_lt",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_92,
                                                                                                       x_95)}}),
                                                  transfer = transfer::case::Con {test = x_94,
                                                                                  cases =   (true => L_62,
                                                                                             false => L_61)}},
                                           block {label = L_62,
                                                  args = (),
                                                  statements = (statement {var = None,
                                                                           type = (< unit >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Array_update",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_93,
                                                                                                       x_92,
                                                                                                       global_12),
                                                                                               targs = ((< word8 >))}},
                                                                statement {var = Some x_91,
                                                                           type = (< word64 >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Word64_add",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_92,
                                                                                                       global_8)}}),
                                                  transfer = transfer::Goto {dst = loop_8,
                                                                             args = (x_91)}},
                                           block {label = L_61,
                                                  args = (),
                                                  statements = (),
                                                  transfer = transfer::Goto {dst = loop_7,
                                                                             args = (global_6)}},
                                           block {label = loop_7,
                                                  args = (x_89: (< word64 >)),
                                                  statements = (statement {var = Some x_90,
                                                                           type = (< bool >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "WordS64_lt",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_89,
                                                                                                       global_8)}}),
                                                  transfer = transfer::case::Con {test = x_90,
                                                                                  cases =   (true => L_60,
                                                                                             false => L_59)}},
                                           block {label = L_60,
                                                  args = (),
                                                  statements = (statement {var = Some x_88,
                                                                           type = (< word64 >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Word64_add",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_89,
                                                                                                       global_8)}}),
                                                  transfer = transfer::Goto {dst = loop_7,
                                                                             args = (x_88)}},
                                           block {label = L_59,
                                                  args = (),
                                                  statements = (statement {var = Some x_85,
                                                                           type = (< list_4 >),
                                                                           exp = exp::ConApp {con = dummy_0,
                                                                                              args = ()}},
                                                                statement {var = None,
                                                                           type = (< unit >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Ref_assign",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (messagers_0,
                                                                                                       x_85),
                                                                                               targs = ((< list_4 >))}},
                                                                statement {var = Some x_84,
                                                                           type = (< list_4 >),
                                                                           exp = exp::ConApp {con = dummy_0,
                                                                                              args = ()}},
                                                                statement {var = None,
                                                                           type = (< unit >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Ref_assign",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (messagers_0,
                                                                                                       x_84),
                                                                                               targs = ((< list_4 >))}},
                                                                statement {var = Some x_83,
                                                                           type = (< list_4 >),
                                                                           exp = exp::ConApp {con = dummy_0,
                                                                                              args = ()}},
                                                                statement {var = None,
                                                                           type = (< unit >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Ref_assign",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (messagers_0,
                                                                                                       x_83),
                                                                                               targs = ((< list_4 >))}},
                                                                statement {var = Some exiting_0,
                                                                           type = (< (bool) ref >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Ref_ref",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (global_39),
                                                                                               targs = ((< bool >))}}),
                                                  transfer = transfer::call::NonTail {func = exit_0,
                                                                                      args = (global_4,
                                                                                              x_87,
                                                                                              x_86,
                                                                                              exiting_0),
                                                                                      cont = L_58,
                                                                                      handler = handler::Handle {label = L_57}}},
                                           block {label = L_58,
                                                  args = (),
                                                  statements = (),
                                                  transfer = transfer::Bug {}},
                                           block {label = L_57,
                                                  args = (),
                                                  statements = (statement {var = None,
                                                                           type = (< unit >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = CFunction {args = ((< (word8) vector >)),
                                                                                                                                   convention = cdecl,
                                                                                                                                   inline = false,
                                                                                                                                   kind = Impure,
                                                                                                                                   prototype = prototype {args = ((< Objptr >)),
                                                                                                                                                          res = None},
                                                                                                                                   return = (< unit >),
                                                                                                                                   symbolScope = private,
                                                                                                                                   target = target {type = Direct,
                                                                                                                                                    name = "Stdio_print"}},
                                                                                                                 kind = DependsOnState},
                                                                                               args = (global_37)}},
                                                                statement {var = None,
                                                                           type = (< unit >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "MLton_halt",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (global_5)}},
                                                                statement {var = None,
                                                                           type = (< unit >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "MLton_bug",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (global_28)}}),
                                                  transfer = transfer::Bug {}},
                                           block {label = loop_6,
                                                  args = (x_82: (< list_3 >)),
                                                  statements = (),
                                                  transfer = transfer::case::Con {test = x_82,
                                                                                  cases =   (nil_0 => L_56,
                                                                                             ::_2 => loop_6)}},
                                           block {label = L_55,
                                                  args = (),
                                                  statements = (statement {var = Some x_79,
                                                                           type = (< word64 >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Word64_add",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_81,
                                                                                                       global_8)}},
                                                                statement {var = Some x_80,
                                                                           type = (< bool >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "WordS64_addCheckP",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_81,
                                                                                                       global_8)}}),
                                                  transfer = transfer::case::Con {test = x_80,
                                                                                  cases =   (true => L_54,
                                                                                             false => L_53)}},
                                           block {label = L_54,
                                                  args = (),
                                                  statements = (statement {var = None,
                                                                           type = (< unit >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = CFunction {args = ((< (word8) vector >)),
                                                                                                                                   convention = cdecl,
                                                                                                                                   inline = false,
                                                                                                                                   kind = Impure,
                                                                                                                                   prototype = prototype {args = ((< Objptr >)),
                                                                                                                                                          res = None},
                                                                                                                                   return = (< unit >),
                                                                                                                                   symbolScope = private,
                                                                                                                                   target = target {type = Direct,
                                                                                                                                                    name = "Stdio_print"}},
                                                                                                                 kind = DependsOnState},
                                                                                               args = (global_0)}},
                                                                statement {var = None,
                                                                           type = (< unit >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = CFunction {args = ((< (word8) vector >)),
                                                                                                                                   convention = cdecl,
                                                                                                                                   inline = false,
                                                                                                                                   kind = Impure,
                                                                                                                                   prototype = prototype {args = ((< Objptr >)),
                                                                                                                                                          res = None},
                                                                                                                                   return = (< unit >),
                                                                                                                                   symbolScope = private,
                                                                                                                                   target = target {type = Direct,
                                                                                                                                                    name = "Stdio_print"}},
                                                                                                                 kind = DependsOnState},
                                                                                               args = (global_1)}},
                                                                statement {var = None,
                                                                           type = (< unit >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = CFunction {args = ((< (word8) vector >)),
                                                                                                                                   convention = cdecl,
                                                                                                                                   inline = false,
                                                                                                                                   kind = Impure,
                                                                                                                                   prototype = prototype {args = ((< Objptr >)),
                                                                                                                                                          res = None},
                                                                                                                                   return = (< unit >),
                                                                                                                                   symbolScope = private,
                                                                                                                                   target = target {type = Direct,
                                                                                                                                                    name = "Stdio_print"}},
                                                                                                                 kind = DependsOnState},
                                                                                               args = (global_2)}},
                                                                statement {var = None,
                                                                           type = (< unit >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "MLton_bug",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (global_3)}}),
                                                  transfer = transfer::Bug {}},
                                           block {label = L_53,
                                                  args = (),
                                                  statements = (statement {var = Some x_77,
                                                                           type = (< list_3 >),
                                                                           exp = exp::ConApp {con = ::_2,
                                                                                              args = (x_78)}}),
                                                  transfer = transfer::Goto {dst = loop_5,
                                                                             args = (x_77,
                                                                                     x_79,
                                                                                     global_6)}})},
                       function {name = "exit_0",
                                 mayInline = true,
                                 args = (x_3: (< word32 >),
                                         x_2: (< (word8) array >),
                                         x_1: (< (bool) ref >),
                                         x_0: (< (bool) ref >)),
                                 start = L_0,
                                 returns = None,
                                 raises = Some (),
                                 blocks = (block {label = L_0,
                                                  args = (),
                                                  statements = (statement {var = Some x_76,
                                                                           type = (< bool >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Ref_deref",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_0),
                                                                                               targs = ((< bool >))}}),
                                                  transfer = transfer::case::Con {test = x_76,
                                                                                  cases =   (true => L_51,
                                                                                             false => L_50)}},
                                           block {label = L_51,
                                                  args = (),
                                                  statements = (),
                                                  transfer = transfer::Raise {args = ()}},
                                           block {label = L_50,
                                                  args = (),
                                                  statements = (statement {var = None,
                                                                           type = (< unit >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Ref_assign",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_0,
                                                                                                       global_42),
                                                                                               targs = ((< bool >))}},
                                                                statement {var = Some x_5,
                                                                           type = (< bool >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "WordS32_lt",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_3,
                                                                                                       global_4)}}),
                                                  transfer = transfer::case::Con {test = x_5,
                                                                                  cases =   (true => L_2,
                                                                                             false => L_1)}},
                                           block {label = L_2,
                                                  args = (),
                                                  statements = (statement {var = None,
                                                                           type = (< unit >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Thread_atomicBegin",
                                                                                                                 kind = DependsOnState},
                                                                                               args = ()}},
                                                                statement {var = Some x_50,
                                                                           type = (< bool >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Ref_deref",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_1),
                                                                                               targs = ((< bool >))}}),
                                                  transfer = transfer::case::Con {test = x_50,
                                                                                  cases =   (true => L_49,
                                                                                             false => L_8)}},
                                           block {label = L_49,
                                                  args = (),
                                                  statements = (statement {var = Some x_75,
                                                                           type = (< word32 >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Thread_atomicState",
                                                                                                                 kind = DependsOnState},
                                                                                               args = ()}},
                                                                statement {var = Some x_74,
                                                                           type = (< bool >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Word32_equal",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_75,
                                                                                                       global_4)}}),
                                                  transfer = transfer::case::Con {test = x_74,
                                                                                  cases =   (true => L_48,
                                                                                             false => L_47)}},
                                           block {label = L_48,
                                                  args = (),
                                                  statements = (),
                                                  transfer = transfer::Raise {args = ()}},
                                           block {label = L_47,
                                                  args = (),
                                                  statements = (statement {var = None,
                                                                           type = (< unit >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Thread_atomicEnd",
                                                                                                                 kind = DependsOnState},
                                                                                               args = ()}},
                                                                statement {var = Some x_73,
                                                                           type = (< word64 >),
                                                                           exp = exp::const::Word {const = 0x21:w64}},
                                                                statement {var = Some x_10,
                                                                           type = (< (word8) array >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Array_alloc",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_73),
                                                                                               targs = ((< word8 >))}}),
                                                  transfer = transfer::Goto {dst = loop_4,
                                                                             args = (global_6)}},
                                           block {label = loop_4,
                                                  args = (x_71: (< word64 >)),
                                                  statements = (statement {var = Some x_72,
                                                                           type = (< bool >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "WordS64_lt",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_71,
                                                                                                       x_73)}}),
                                                  transfer = transfer::case::Con {test = x_72,
                                                                                  cases =   (true => L_46,
                                                                                             false => L_45)}},
                                           block {label = L_46,
                                                  args = (),
                                                  statements = (statement {var = None,
                                                                           type = (< unit >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Array_update",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_10,
                                                                                                       x_71,
                                                                                                       global_12),
                                                                                               targs = ((< word8 >))}},
                                                                statement {var = Some x_70,
                                                                           type = (< word64 >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Word64_add",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_71,
                                                                                                       global_8)}}),
                                                  transfer = transfer::Goto {dst = loop_4,
                                                                             args = (x_70)}},
                                           block {label = L_45,
                                                  args = (),
                                                  statements = (),
                                                  transfer = transfer::case::Con {test = x_5,
                                                                                  cases =   (true => L_44,
                                                                                             false => L_9)}},
                                           block {label = L_44,
                                                  args = (),
                                                  statements = (),
                                                  transfer = transfer::Goto {dst = loop_1,
                                                                             args = (global_26,
                                                                                     x_3,
                                                                                     x_10)}},
                                           block {label = loop_1,
                                                  args = (x_15: (< word32 >),
                                                          x_62: (< word32 >),
                                                          x_11:
                                                            (< (word8) array >)),
                                                  statements = (statement {var = Some x_69,
                                                                           type = (< word32 >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "WordS32_rem",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_62,
                                                                                                       global_16)}},
                                                                statement {var = Some x_68,
                                                                           type = (< word32 >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Word32_neg",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_69)}},
                                                                statement {var = Some x_66,
                                                                           type = (< word64 >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "WordS32_extdToWord64",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_68)}},
                                                                statement {var = Some x_67,
                                                                           type = (< bool >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "WordU64_lt",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_66,
                                                                                                       global_29)}}),
                                                  transfer = transfer::case::Con {test = x_67,
                                                                                  cases =   (true => L_43,
                                                                                             false => L_12)}},
                                           block {label = L_43,
                                                  args = (),
                                                  statements = (statement {var = Some x_63,
                                                                           type = (< word8 >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Vector_sub",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (global_30,
                                                                                                       x_66),
                                                                                               targs = ((< word8 >))}},
                                                                statement {var = Some x_54,
                                                                           type = (< word64 >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Array_length",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_11),
                                                                                               targs = ((< word8 >))}},
                                                                statement {var = Some x_64,
                                                                           type = (< word64 >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "WordS32_extdToWord64",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_15)}},
                                                                statement {var = Some x_65,
                                                                           type = (< bool >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "WordU64_lt",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_64,
                                                                                                       x_54)}}),
                                                  transfer = transfer::case::Con {test = x_65,
                                                                                  cases =   (true => L_42,
                                                                                             false => L_12)}},
                                           block {label = L_42,
                                                  args = (),
                                                  statements = (statement {var = None,
                                                                           type = (< unit >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Array_update",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_11,
                                                                                                       x_64,
                                                                                                       x_63),
                                                                                               targs = ((< word8 >))}},
                                                                statement {var = Some x_12,
                                                                           type = (< word32 >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "WordS32_quot",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_62,
                                                                                                       global_16)}},
                                                                statement {var = Some x_61,
                                                                           type = (< bool >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Word32_equal",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_12,
                                                                                                       global_4)}}),
                                                  transfer = transfer::case::Con {test = x_61,
                                                                                  cases =   (true => L_41,
                                                                                             false => L_11)}},
                                           block {label = L_41,
                                                  args = (),
                                                  statements = (),
                                                  transfer = transfer::case::Con {test = x_5,
                                                                                  cases =   (true => L_40,
                                                                                             false => L_13)}},
                                           block {label = L_40,
                                                  args = (),
                                                  statements = (statement {var = Some x_58,
                                                                           type = (< word32 >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Word32_sub",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_15,
                                                                                                       global_5)}},
                                                                statement {var = Some x_60,
                                                                           type = (< bool >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "WordS32_subCheckP",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_15,
                                                                                                       global_5)}}),
                                                  transfer = transfer::case::Con {test = x_60,
                                                                                  cases =   (true => L_12,
                                                                                             false => L_37)}},
                                           block {label = L_12,
                                                  args = (),
                                                  statements = (),
                                                  transfer = transfer::case::Con {test = x_50,
                                                                                  cases =   (true => L_39,
                                                                                             false => L_38)}},
                                           block {label = L_39,
                                                  args = (),
                                                  statements = (),
                                                  transfer = transfer::Raise {args = ()}},
                                           block {label = L_38,
                                                  args = (),
                                                  statements = (statement {var = None,
                                                                           type = (< unit >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Ref_assign",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_1,
                                                                                                       global_39),
                                                                                               targs = ((< bool >))}}),
                                                  transfer = transfer::Raise {args = ()}},
                                           block {label = L_37,
                                                  args = (),
                                                  statements = (statement {var = Some x_57,
                                                                           type = (< word64 >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "WordS32_extdToWord64",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_58)}},
                                                                statement {var = Some x_59,
                                                                           type = (< bool >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "WordU64_lt",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_57,
                                                                                                       x_54)}}),
                                                  transfer = transfer::case::Con {test = x_59,
                                                                                  cases =   (true => L_36,
                                                                                             false => L_12)}},
                                           block {label = L_36,
                                                  args = (),
                                                  statements = (statement {var = None,
                                                                           type = (< unit >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Array_update",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_11,
                                                                                                       x_57,
                                                                                                       global_31),
                                                                                               targs = ((< word8 >))}}),
                                                  transfer = transfer::Goto {dst = L_14,
                                                                             args = (x_58)}},
                                           block {label = L_14,
                                                  args = (x_55: (< word32 >)),
                                                  statements = (statement {var = Some x_18,
                                                                           type = (< word64 >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "WordS32_extdToWord64",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_55)}},
                                                                statement {var = Some x_56,
                                                                           type = (< bool >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "WordU64_lt",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_54,
                                                                                                       x_18)}}),
                                                  transfer = transfer::case::Con {test = x_56,
                                                                                  cases =   (true => L_12,
                                                                                             false => L_35)}},
                                           block {label = L_35,
                                                  args = (),
                                                  statements = (statement {var = Some x_17,
                                                                           type = (< word64 >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Word64_sub",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_54,
                                                                                                       x_18)}},
                                                                statement {var = Some isZero_0,
                                                                           type = (< bool >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Word64_equal",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (global_6,
                                                                                                       x_17)}}),
                                                  transfer = transfer::case::Con {test = isZero_0,
                                                                                  cases =   (true => L_zeroLen_0,
                                                                                             false => L_nonZeroLen_0)}},
                                           block {label = L_zeroLen_0,
                                                  args = (),
                                                  statements = (),
                                                  transfer = transfer::Goto {dst = L_join_0,
                                                                             args = (zeroArr_0)}},
                                           block {label = L_join_0,
                                                  args = (x_19:
                                                            (< (word8) array >)),
                                                  statements = (statement {var = Some x_53,
                                                                           type = (< bool >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "WordS64_lt",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_17,
                                                                                                       global_11)}}),
                                                  transfer = transfer::case::Con {test = x_53,
                                                                                  cases =   (true => L_34,
                                                                                             false => L_15)}},
                                           block {label = L_34,
                                                  args = (),
                                                  statements = (statement {var = Some x_52,
                                                                           type = (< word64 >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Word64_sub",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_17,
                                                                                                       global_8)}}),
                                                  transfer = transfer::Goto {dst = loop_2,
                                                                             args = (global_6)}},
                                           block {label = loop_2,
                                                  args = (x_21: (< word64 >)),
                                                  statements = (statement {var = Some x_51,
                                                                           type = (< bool >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "WordS64_lt",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_52,
                                                                                                       x_21)}}),
                                                  transfer = transfer::case::Con {test = x_51,
                                                                                  cases =   (true => L_16,
                                                                                             false => L_17)}},
                                           block {label = L_16,
                                                  args = (),
                                                  statements = (statement {var = Some x_49,
                                                                           type = (< (word8) vector >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Array_toVector",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_19),
                                                                                               targs = ((< word8 >))}}),
                                                  transfer = transfer::case::Con {test = x_50,
                                                                                  cases =   (true => L_19,
                                                                                             false => L_18)}},
                                           block {label = L_19,
                                                  args = (),
                                                  statements = (statement {var = Some x_42,
                                                                           type = (< list_2 >),
                                                                           exp = exp::ConApp {con = ::_1,
                                                                                              args = (global_43,
                                                                                                      x_49)}}),
                                                  transfer = transfer::Goto {dst = L_21,
                                                                             args = (x_42,
                                                                                     global_36,
                                                                                     global_6)}},
                                           block {label = L_21,
                                                  args = (x_44: (< list_2 >),
                                                          x_46:
                                                            (< (word8) vector >),
                                                          x_45: (< word64 >)),
                                                  statements = (statement {var = Some x_48,
                                                                           type = (< word64 >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Vector_length",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_46),
                                                                                               targs = ((< word8 >))}},
                                                                statement {var = Some x_26,
                                                                           type = (< word64 >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Word64_add",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_48,
                                                                                                       x_45)}},
                                                                statement {var = Some x_47,
                                                                           type = (< bool >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "WordS64_addCheckP",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_48,
                                                                                                       x_45)}}),
                                                  transfer = transfer::case::Con {test = x_47,
                                                                                  cases =   (true => L_33,
                                                                                             false => L_32)}},
                                           block {label = L_33,
                                                  args = (),
                                                  statements = (),
                                                  transfer = transfer::Raise {args = ()}},
                                           block {label = L_32,
                                                  args = (),
                                                  statements = (),
                                                  transfer = transfer::case::Con {test = x_44,
                                                                                  cases =   (nil_2 => L_31,
                                                                                             ::_1 => L_20)}},
                                           block {label = L_31,
                                                  args = (),
                                                  statements = (statement {var = Some x_43,
                                                                           type = (< bool >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "WordU64_lt",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (global_10,
                                                                                                       x_26)}}),
                                                  transfer = transfer::case::Con {test = x_43,
                                                                                  cases =   (true => L_30,
                                                                                             false => L_29)}},
                                           block {label = L_30,
                                                  args = (),
                                                  statements = (),
                                                  transfer = transfer::Raise {args = ()}},
                                           block {label = L_29,
                                                  args = (),
                                                  statements = (statement {var = Some x_30,
                                                                           type = (< (word8) array >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Array_alloc",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_26),
                                                                                               targs = ((< word8 >))}}),
                                                  transfer = transfer::Goto {dst = L_26,
                                                                             args = (x_42,
                                                                                     global_36,
                                                                                     global_6)}},
                                           block {label = L_26,
                                                  args = (x_38: (< list_2 >),
                                                          x_28:
                                                            (< (word8) vector >),
                                                          x_29: (< word64 >)),
                                                  statements = (statement {var = Some x_27,
                                                                           type = (< word64 >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Vector_length",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_28),
                                                                                               targs = ((< word8 >))}},
                                                                statement {var = Some x_41,
                                                                           type = (< bool >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "WordS64_lt",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_27,
                                                                                                       global_11)}}),
                                                  transfer = transfer::case::Con {test = x_41,
                                                                                  cases =   (true => L_28,
                                                                                             false => L_22)}},
                                           block {label = L_28,
                                                  args = (),
                                                  statements = (statement {var = Some x_40,
                                                                           type = (< word64 >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Word64_sub",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_27,
                                                                                                       global_8)}}),
                                                  transfer = transfer::Goto {dst = loop_3,
                                                                             args = (global_6)}},
                                           block {label = loop_3,
                                                  args = (x_32: (< word64 >)),
                                                  statements = (statement {var = Some x_39,
                                                                           type = (< bool >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "WordS64_lt",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_40,
                                                                                                       x_32)}}),
                                                  transfer = transfer::case::Con {test = x_39,
                                                                                  cases =   (true => L_23,
                                                                                             false => L_24)}},
                                           block {label = L_23,
                                                  args = (),
                                                  statements = (statement {var = Some x_37,
                                                                           type = (< word64 >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Word64_add",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_27,
                                                                                                       x_29)}}),
                                                  transfer = transfer::case::Con {test = x_38,
                                                                                  cases =   (nil_2 => L_27,
                                                                                             ::_1 => L_25)}},
                                           block {label = L_27,
                                                  args = (),
                                                  statements = (),
                                                  transfer = transfer::Raise {args = ()}},
                                           block {label = L_25,
                                                  args = (x_36: (< list_2 >),
                                                          x_35:
                                                            (< (word8) vector >)),
                                                  statements = (),
                                                  transfer = transfer::Goto {dst = L_26,
                                                                             args = (x_36,
                                                                                     x_35,
                                                                                     x_37)}},
                                           block {label = L_24,
                                                  args = (),
                                                  statements = (statement {var = Some x_34,
                                                                           type = (< word64 >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Word64_add",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_32,
                                                                                                       x_29)}},
                                                                statement {var = Some x_33,
                                                                           type = (< word8 >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Vector_sub",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_28,
                                                                                                       x_32),
                                                                                               targs = ((< word8 >))}},
                                                                statement {var = None,
                                                                           type = (< unit >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Array_update",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_30,
                                                                                                       x_34,
                                                                                                       x_33),
                                                                                               targs = ((< word8 >))}},
                                                                statement {var = Some x_31,
                                                                           type = (< word64 >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Word64_add",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_32,
                                                                                                       global_8)}}),
                                                  transfer = transfer::Goto {dst = loop_3,
                                                                             args = (x_31)}},
                                           block {label = L_22,
                                                  args = (),
                                                  statements = (statement {var = None,
                                                                           type = (< unit >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Array_copyVector",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_30,
                                                                                                       x_29,
                                                                                                       x_28,
                                                                                                       global_6,
                                                                                                       x_27),
                                                                                               targs = ((< word8 >))}}),
                                                  transfer = transfer::Goto {dst = L_23,
                                                                             args = ()}},
                                           block {label = L_20,
                                                  args = (x_25: (< list_2 >),
                                                          x_24:
                                                            (< (word8) vector >)),
                                                  statements = (),
                                                  transfer = transfer::Goto {dst = L_21,
                                                                             args = (x_25,
                                                                                     x_24,
                                                                                     x_26)}},
                                           block {label = L_18,
                                                  args = (),
                                                  statements = (statement {var = None,
                                                                           type = (< unit >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Ref_assign",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_1,
                                                                                                       global_39),
                                                                                               targs = ((< bool >))}}),
                                                  transfer = transfer::Goto {dst = L_19,
                                                                             args = ()}},
                                           block {label = L_17,
                                                  args = (),
                                                  statements = (statement {var = Some x_23,
                                                                           type = (< word64 >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Word64_add",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_21,
                                                                                                       x_18)}},
                                                                statement {var = Some x_22,
                                                                           type = (< word8 >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Array_sub",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_11,
                                                                                                       x_23),
                                                                                               targs = ((< word8 >))}},
                                                                statement {var = None,
                                                                           type = (< unit >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Array_update",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_19,
                                                                                                       x_21,
                                                                                                       x_22),
                                                                                               targs = ((< word8 >))}},
                                                                statement {var = Some x_20,
                                                                           type = (< word64 >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Word64_add",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_21,
                                                                                                       global_8)}}),
                                                  transfer = transfer::Goto {dst = loop_2,
                                                                             args = (x_20)}},
                                           block {label = L_15,
                                                  args = (),
                                                  statements = (statement {var = None,
                                                                           type = (< unit >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Array_copyArray",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_19,
                                                                                                       global_6,
                                                                                                       x_11,
                                                                                                       x_18,
                                                                                                       x_17),
                                                                                               targs = ((< word8 >))}}),
                                                  transfer = transfer::Goto {dst = L_16,
                                                                             args = ()}},
                                           block {label = L_nonZeroLen_0,
                                                  args = (),
                                                  statements = (statement {var = Some x_16,
                                                                           type = (< (word8) array >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Array_alloc",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_17),
                                                                                               targs = ((< word8 >))}}),
                                                  transfer = transfer::Goto {dst = L_join_0,
                                                                             args = (x_16)}},
                                           block {label = L_13,
                                                  args = (),
                                                  statements = (),
                                                  transfer = transfer::Goto {dst = L_14,
                                                                             args = (x_15)}},
                                           block {label = L_11,
                                                  args = (),
                                                  statements = (statement {var = Some x_13,
                                                                           type = (< word32 >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Word32_sub",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_15,
                                                                                                       global_5)}},
                                                                statement {var = Some x_14,
                                                                           type = (< bool >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "WordS32_subCheckP",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_15,
                                                                                                       global_5)}}),
                                                  transfer = transfer::case::Con {test = x_14,
                                                                                  cases =   (true => L_12,
                                                                                             false => L_10)}},
                                           block {label = L_10,
                                                  args = (),
                                                  statements = (),
                                                  transfer = transfer::Goto {dst = loop_1,
                                                                             args = (x_13,
                                                                                     x_12,
                                                                                     x_11)}},
                                           block {label = L_9,
                                                  args = (),
                                                  statements = (),
                                                  transfer = transfer::Goto {dst = L_4,
                                                                             args = (x_10)}},
                                           block {label = L_4,
                                                  args = (x_8:
                                                            (< (word8) array >)),
                                                  statements = (statement {var = Some x_9,
                                                                           type = (< word32 >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Word32_neg",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_3)}}),
                                                  transfer = transfer::Goto {dst = loop_1,
                                                                             args = (global_26,
                                                                                     x_9,
                                                                                     x_8)}},
                                           block {label = L_8,
                                                  args = (),
                                                  statements = (statement {var = None,
                                                                           type = (< unit >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Ref_assign",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_1,
                                                                                                       global_42),
                                                                                               targs = ((< bool >))}},
                                                                statement {var = Some x_7,
                                                                           type = (< word32 >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Thread_atomicState",
                                                                                                                 kind = DependsOnState},
                                                                                               args = ()}},
                                                                statement {var = Some x_6,
                                                                           type = (< bool >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Word32_equal",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_7,
                                                                                                       global_4)}}),
                                                  transfer = transfer::case::Con {test = x_6,
                                                                                  cases =   (true => L_7,
                                                                                             false => L_6)}},
                                           block {label = L_7,
                                                  args = (),
                                                  statements = (),
                                                  transfer = transfer::Raise {args = ()}},
                                           block {label = L_6,
                                                  args = (),
                                                  statements = (statement {var = None,
                                                                           type = (< unit >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "Thread_atomicEnd",
                                                                                                                 kind = DependsOnState},
                                                                                               args = ()}}),
                                                  transfer = transfer::case::Con {test = x_5,
                                                                                  cases =   (true => L_5,
                                                                                             false => L_3)}},
                                           block {label = L_5,
                                                  args = (),
                                                  statements = (),
                                                  transfer = transfer::Goto {dst = loop_1,
                                                                             args = (global_26,
                                                                                     x_3,
                                                                                     x_2)}},
                                           block {label = L_3,
                                                  args = (),
                                                  statements = (),
                                                  transfer = transfer::Goto {dst = L_4,
                                                                             args = (x_2)}},
                                           block {label = L_1,
                                                  args = (),
                                                  statements = (statement {var = Some x_4,
                                                                           type = (< bool >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "WordS32_lt",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_3,
                                                                                                       global_27)}}),
                                                  transfer = transfer::case::Con {test = x_4,
                                                                                  cases =   (true => loop_0,
                                                                                             false => L_2)}},
                                           block {label = loop_0,
                                                  args = (),
                                                  statements = (statement {var = None,
                                                                           type = (< unit >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "MLton_halt",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (x_3)}},
                                                                statement {var = None,
                                                                           type = (< unit >),
                                                                           exp = exp::PrimApp {prim = primitive {prim = "MLton_bug",
                                                                                                                 kind = DependsOnState},
                                                                                               args = (global_28)}}),
                                                  transfer = transfer::Bug {}})}),
          main = main_0}
